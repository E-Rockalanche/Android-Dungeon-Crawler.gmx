<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inventory = -1;
owner = -1;
title = "";
button_list = ds_list_create();
scale = 1;

if (ASPECT_RATIO &gt; 1){
    columns = COLUMNS_LANDSCAPE;
    rows = COLUMNS_PORTRAIT;
    }
else{
    columns = COLUMNS_PORTRAIT;
    rows = COLUMNS_LANDSCAPE;
    }
    
surf_width = BORDER_WIDTH*2 + columns*SLOT_SIZE;
surf_height = BORDER_WIDTH*2 + HEADER_HEIGHT + rows*SLOT_SIZE;

scale = min(dwidth div surf_width, dheight div surf_height);

surf_x = (dwidth - surf_width*scale)/2;
surf_y = (dheight - surf_height*scale)/2;

in_focus = true;
visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if in_focus{
    if MouseClicked(0){
        if MouseRawInBox(0, surf_x, surf_y, surf_width*scale, surf_height*scale){
            var button = ClickedOnButton();
            if (button != -1){
                //clicked on valid button
                var item = button[? BUTTON.ITEM];
                
                if (listener == -1){
                    ItemWindowOpen(item, id);
                    in_focus = false;
                    MouseReset();
                    }
                else{
                    ListenerSelectItem(listener, listener_type, item);
                    WindowDestroy(id);
                    }
                }
            }
        else{//clicked outside inventory screen
            obj_game.game_state = GAME_STATE.PLAYER_TURN;
            WindowDestroy(id);
            exit;
            }
        }
        
    if keyboard_check_pressed(vk_backspace){//go back
        obj_game.game_state = GAME_STATE.PLAYER_TURN;
        WindowDestroy(id);
        keyboard_lastkey = -1;
        exit;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory

inventory_surf = surface_create(surf_width, surf_height);
surface_set_target(inventory_surf);
draw_clear_alpha(c_gray, 1);
draw_set_colour_write_enable(true, true, true, false);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

//draw title
//draw_set_colour(c_black);
draw_text_colour(BORDER_WIDTH, BORDER_WIDTH, title, c_black, c_black, c_black, c_black, 1);

//draw items
for(var n = 0; n &lt; ds_list_size(button_list); n++){
    ButtonDraw(button_list[| n]);
    }
/*
var inventory = player.inventory;
for(var n = 0; n &lt; ds_list_size(item_buttons); n++){
    var button = item_buttons[| n];
    var i = n mod columns;
    var j = n div columns;
    var item = button[? BUTTON.ITEM];
    var draw_x = (i + 0.25)*SLOT_SIZE + BORDER_WIDTH;
    var draw_y = (j + 0.25)*SLOT_SIZE + BORDER_WIDTH + HEADER_HEIGHT;
    draw_set_alpha((1 + button[? BUTTON.ENABLED])/2);
    draw_sprite(ItemGetSprite(item), 0, draw_x, draw_y);
    }
*/

//draw gold
//var xx = BORDER_WIDTH + (n mod columns)*SLOT_SIZE
//var yy = BORDER_WIDTH + HEADER_HEIGHT + (n div columns)*SLOT_SIZE 
var alpha = ((1 + (mode == INVENTORY_MODE.ALL))/2);
var draw_x = ((columns - 1) + 0.5)*SLOT_SIZE + BORDER_WIDTH;
var draw_y = ((rows - 1) + 0.5)*SLOT_SIZE + BORDER_WIDTH + HEADER_HEIGHT;
draw_sprite_ext(spr_gold, 0, draw_x, draw_y, 1, 1, 0, c_white, alpha);

surface_reset_target();
draw_set_colour_write_enable(true, true, true, true);
draw_surface_ext(inventory_surf, surf_x, surf_y, scale, scale, 0, c_white, 1);
surface_free(inventory_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
