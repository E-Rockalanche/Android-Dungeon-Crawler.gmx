<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create


globalvar delta, step;
delta = 1;
step = 0;//counts up to step maximum


game_state = GAME_STATE.TURN_START;

player = 1;

num_screenshots = 0;
num_GIFs = 0;
GIF_image = 0;
creating_GIF = false;


shadow_surf = -1;


//audio_play_sound(msc_game, INT_MAX, true);


//player variables
player_depth = 0;//outside dungeon
max_player_depth = 0;
player_automove = false;
update_player_view = false;
screen_locked_to_player = true;
//handles the player clicking on objects/entities/items on the screen. Uses enum PLAYER_INTERACTION
//the player character moves towards the object until it is permittable to interact with
interaction_object = -1;
interaction_type = -1;
interaction_cell = -1;


out_of_view_opacity = 0.3;
if ((os_type == os_android) || (os_type == os_ios) || (os_type == os_winphone)){
    out_of_view_opacity = 0.5;
    }


//non-floor specific lists
//item_index = ds_list_create();//has all item information
view_list = ds_list_create();//list of all cells in view of the player
decide_list = ds_list_create();//entities deciding in current turn
will_move_list = ds_list_create();//entities deciding to move
moving_list = ds_list_create();//entities that are moving
action_list = ds_list_create();//entities deciding to make an action
log_list = ds_list_create();//log entries

map_turn_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI

bag_width = 32*HUD_SCALE;
bag_height = 32*HUD_SCALE;
bag_x = dwidth - bag_width;
bag_y = dheight - bag_height;

ss_width = 32*HUD_SCALE;
ss_height = 32*HUD_SCALE;
ss_x = bag_x - ss_width;
ss_y = bag_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms

game_state_alarm = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse

//mouse alarms for multi-touch
mouse_alarm[0] = -1;
mouse_alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animated tiles

scr_init_animated_tiles();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaders

num_shaders = 20;
shader_index = 0;
shader = shader_bypass;
shader_name = "bypass";

u_gb_size = shader_get_uniform(shader_gaussian_blur, "size");

u_bloom_size = shader_get_uniform(shader_bloom, "size");

u_glow_size = shader_get_uniform(shader_glow, "size");

u_wave_size = shader_get_uniform(shader_wave, "size");
u_wave_length = shader_get_uniform(shader_wave, "wavelength");
u_wave_alpha = shader_get_uniform(shader_wave, "alpha");

u_bb_size = shader_get_uniform(shader_bubble, "size");
u_bb_length = shader_get_uniform(shader_bubble, "wavelength");
u_bb_alpha = shader_get_uniform(shader_bubble, "alpha");

u_lsd_size = shader_get_uniform(shader_lsd, "size");
u_lsd_length = shader_get_uniform(shader_lsd, "wavelength");
u_lsd_alpha = shader_get_uniform(shader_lsd, "alpha");

u_rpl_size = shader_get_uniform(shader_ripple, "size");
u_rpl_length = shader_get_uniform(shader_ripple, "wavelength");
u_rpl_alpha = shader_get_uniform(shader_ripple, "alpha");

u_twist_size = shader_get_uniform(shader_twist, "size");
u_twist_length = shader_get_uniform(shader_twist, "wavelength");
u_twist_alpha = shader_get_uniform(shader_twist, "alpha");
u_twist_amplitude = shader_get_uniform(shader_twist, "amplitude");

u_rrpl_size = shader_get_uniform(shader_radial_ripple, "size");
u_rrpl_length = shader_get_uniform(shader_radial_ripple, "wavelength");
u_rrpl_alpha = shader_get_uniform(shader_radial_ripple, "alpha");

u_bp_size = shader_get_uniform(shader_big_pixels, "size");

u_pxlt_size = shader_get_uniform(shader_pixelate, "size");

u_rgb_width = shader_get_uniform(shader_rgb_bleed, "width");

u_gmby_size = shader_get_uniform(shader_gameboy, "size");

//u_shadow_size = shader_get_uniform(shader_shadow, "size");
//u_shadow_hor = shader_get_uniform(shader_shadow, "hor");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

console_command = "";
show_outlines = false;
show_debug_info = true;

normal_delta_time = 1000000/60;

debug_see_all = false;

runtime_surf_width = view_wport div 2;
runtime_surf_height = 50;
runtime_surf = surface_create(runtime_surf_width, runtime_surf_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View and Display

if (game_state == GAME_STATE.ENTITY_MOVING){
    scr_entities_moving();//updates entity display positions
    }

if !on_mobile{
    var zoom = 0;
    if mouse_wheel_down(){
        //zoom out. Increase view size
        zoom = 1/1.1;
        }
    else if mouse_wheel_up(){
        //zoom in. decrease view size
        zoom = 1.1;
        }
    if (zoom != 0){
        var vx = view_xview + view_wview/2;
        var vy = view_yview + view_hview/2;
        
        view_wview = clamp(view_wview/zoom, VIEW_WVIEW/VIEW_ZOOM_MAX, VIEW_WVIEW/VIEW_ZOOM_MIN);
        view_hview = clamp(view_hview/zoom, VIEW_HVIEW/VIEW_ZOOM_MAX, VIEW_HVIEW/VIEW_ZOOM_MIN);
        
        view_xview = round(vx - view_wview/2);
        view_yview = round(vy - view_hview/2);
        }
    }

if MouseHolding(0){
    if MouseHolding(1){
        var d1 = point_distance(mouse_click_x[0], mouse_click_y[0], mouse_click_x[1], mouse_click_y[1]);
        var d2 = point_distance(device_mouse_raw_x(0), device_mouse_raw_y(0), device_mouse_raw_x(1), device_mouse_raw_y(1));
        
        /*
        var d1 = sqrt(sqr(mouse_click_x[0] - mouse_click_x[1]) + sqr(mouse_click_y[0] - mouse_click_y[1]));
        var d2 = sqrt(sqr(mouse_raw_x[0] - mouse_raw_x[1]) + sqr(mouse_raw_y[0] - mouse_raw_y[1]));
        */
        
        var zoom = d2/d1;
        
        var vx = view_xview + view_wview/2;
        var vy = view_yview + view_hview/2;
        
        view_wview = clamp(view_wview/zoom, VIEW_WVIEW/VIEW_ZOOM_MAX, VIEW_WVIEW/VIEW_ZOOM_MIN);
        view_hview = clamp(view_hview/zoom, VIEW_HVIEW/VIEW_ZOOM_MAX, VIEW_HVIEW/VIEW_ZOOM_MIN);
        
        view_xview = round(vx - view_wview/2);
        view_yview = round(vy - view_hview/2);
        
        //update new mouse positions
        for(var m = 0; m &lt; 2; m++){
            //save raw positions
            mouse_click_x[m] = device_mouse_raw_x(m);
            mouse_click_y[m] = device_mouse_raw_y(m);
            //save map positions
            mouse_x0[m] = device_mouse_x(m);
            mouse_y0[m] = device_mouse_y(m);
            }
        }
    else{
        //drag screen
        screen_locked_to_player = false;
        view_xview += mouse_x0[0] - device_mouse_x(0);
        view_yview += mouse_y0[0] - device_mouse_y(0);
        }
    }

if screen_locked_to_player{
    view_xview = player.draw_x - view_wview/2;
    view_yview = player.draw_y - view_hview/2;
    }
view_xview = floor(view_xview);
view_yview = floor(view_yview);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animated tiles

scr_update_animated_tiles();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

if DEBUG{
    if (game_state != GAME_STATE.CONSOLE_COMMAND){
        if keyboard_check_pressed(ord('R')){
            scr_destroy_data();
            game_restart();
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update mouse, save/load, delta_time, GIFs

if creating_GIF{
    delta = 1;
    }
else{
    delta = (delta_time/1000000)*room_speed;
    }

step = ((step + delta) mod STEP_MAX);

scr_update_mouse();

//manually stop automove
if (MouseClicked(0) &amp;&amp; player_automove){
    player_automove = false;
    }

texture_set_interpolation(false);

if (game_state == GAME_STATE.PLAYER_TURN){
    if keyboard_check_pressed(save_key){
        SaveGame("save.rogue");
        }
    else if keyboard_check_pressed(load_key){
        scr_reset_view();
        scr_reset_tiles();
        with(instance_create(0, 0, obj_game)){
            LoadGame("save.rogue");
            }
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Alarm

if (game_state_alarm &gt;= 0){
    game_state_alarm -= delta;
    if (game_state_alarm &lt;= 0){
        game_state_alarm = -1;
        switch(game_state){
            case GAME_STATE.ENTITY_MOVING:
                for(var n = 0; n &lt; ds_list_size(moving_list); ++n){
                    var entity = moving_list[| n];
                    EntitySetDrawPos(entity);
                    EntitySetSpriteStand(entity);
                    EntityPlayStepSound(entity);
                    }
                ds_list_clear(moving_list);
                
                if (ds_list_size(action_list) &gt; 0){
                    game_state = GAME_STATE.AI_TURN;
                    }
                else{
                    game_state = GAME_STATE.TURN_START;
                    }
                break;
                
            case GAME_STATE.ANIMATION:
                game_state = GAME_STATE.AI_TURN;
                break;
            
            default:
                ASSERT(false, "Unknown game state '"+string(game_state)+"' in state alarm");
                break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaders

if keyboard_check_pressed(vk_space) &amp;&amp; (game_state != GAME_STATE.CONSOLE_COMMAND){
    scr_next_shader();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Loop

if DEBUG{
    scr_console_command();
    }
    
//do not switch game_state! Scripts must perform in the same step

if (game_state == GAME_STATE.TURN_START){
    scr_turn_start();
    }

    
//player turn
switch(game_state){
    case GAME_STATE.PLAYER_TURN:
        if EntityIsAlive(player){
            scr_player_turn();
            }
        else{
            game_state = GAME_STATE.AI_TURN;//enemies will move around on the game over screen
            }
        break;
        
    case GAME_STATE.THROW_ITEM:
        scr_player_throw_item();
        break;
        
    case GAME_STATE.USE_WAND:
        scr_player_use_wand();
        break;
        
    case GAME_STATE.INVENTORY:
        exit;
        break;
    }

    
if (game_state == GAME_STATE.AI_TURN){
    scr_ai_turn();
    }


if update_player_view{
    scr_update_player_view();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///disable alpha writes
draw_set_colour_write_enable(true, true, true, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshot

if (game_state != GAME_STATE.CONSOLE_COMMAND){
    if keyboard_check_pressed(ord('G')){
        if creating_GIF{
            show_debug_message("Saved GIF");
            num_GIFs++;
            }
        else{
            GIF_image = 0;
            }
        
        creating_GIF = !creating_GIF;
        }
    
    if (keyboard_check_pressed(screenshot_key) || creating_GIF){
        scr_save_screenshot();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Application Surface

if (player.cell.tile == TILE.WATER){
    shader_set(shader_ripple);
    shader_set_uniform_f(u_rpl_size, view_wview, view_hview, 2);
    shader_set_uniform_f(u_rpl_length, 64);
    shader_set_uniform_f(u_rpl_alpha, 2*step/128*2*pi);
    draw_set_colour(c_blue);
    draw_set_alpha(1);
    draw_surface(application_surface, 0, 0);
    shader_reset();
    draw_set_colour(c_white);
    }
else if (shader != shader_bypass)
    {
    draw_set_alpha(1);
    draw_set_colour(c_white);
    shader_set(shader);
    
    if (shader == shader_gaussian_blur){
        shader_set_uniform_f(u_gb_size, view_wport, view_hport, 8);
        }
    else if (shader == shader_bloom){
        shader_set_uniform_f(u_bloom_size, view_wport, view_hport, 8);
        }
    else if (shader == shader_glow){
        shader_set_uniform_f(u_glow_size, view_wport, view_hport, 8);
        }
    else if (shader == shader_wave){
        shader_set_uniform_f(u_wave_size, view_wview, view_hview, 2);
        shader_set_uniform_f(u_wave_length, 24);
        shader_set_uniform_f(u_wave_alpha, step/64*2*pi);
        }
    else if (shader == shader_bubble){
        shader_set_uniform_f(u_bb_size, view_wview, view_hview, 2);
        shader_set_uniform_f(u_bb_length, 64);
        shader_set_uniform_f(u_bb_alpha, step/128*2*pi);
        }
    else if (shader == shader_lsd){
        shader_set_uniform_f(u_lsd_size, view_wview, view_hview, 2);
        shader_set_uniform_f(u_lsd_length, 32);
        shader_set_uniform_f(u_lsd_alpha, step/128*2*pi);
        }
    else if (shader == shader_ripple){
        shader_set_uniform_f(u_rpl_size, view_wview, view_hview, 1);
        shader_set_uniform_f(u_rpl_length, 64);
        shader_set_uniform_f(u_rpl_alpha, 2*step/128*2*pi);
        }
    else if (shader == shader_twist){
        shader_set_uniform_f(u_twist_size, view_wview, view_hview);
        shader_set_uniform_f(u_twist_length, 32);
        shader_set_uniform_f(u_twist_alpha, step/128*2*pi);
        shader_set_uniform_f(u_twist_amplitude, 4);
        }
    else if (shader == shader_radial_ripple){
        shader_set_uniform_f(u_rrpl_size, view_wview, view_hview, 2);
        shader_set_uniform_f(u_rrpl_length, 32);
        shader_set_uniform_f(u_rrpl_alpha, step/16*pi);
        }
    else if (shader == shader_big_pixels){
        shader_set_uniform_f(u_bp_size, view_wport, view_hport);
        }
    else if (shader == shader_pixelate){
        shader_set_uniform_f(u_pxlt_size, view_wport, view_hport);
        }
    else if (shader == shader_rgb_bleed){
        shader_set_uniform_f(u_rgb_width, view_wport);
        }
    else if (shader == shader_gameboy){
        shader_set_uniform_f(u_gmby_size, view_wport, view_hport);
        }
    
    draw_surface(application_surface, 0, 0);
    shader_reset();
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

draw_sprite_ext(spr_bag_button, 0, bag_x, bag_y, HUD_SCALE, HUD_SCALE, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
if (DEBUG &amp;&amp; show_debug_info){
    draw_set_alpha(1);
    /*
    //draw fps graph
    var new_runtime_surf = surface_create(runtime_surf_width, runtime_surf_height);
    surface_set_target(new_runtime_surf);
    if surface_exists(runtime_surf){
        draw_surface(runtime_surf, -1, 0)
        }
    var fraction = delta_time/(normal_delta_time);
    if (fraction &lt;= 1){
        draw_set_colour(c_green);
        }
    else if (fraction &lt;= 1.5){
        draw_set_colour(c_orange);
        }
    else{
        draw_set_colour(c_red);
        }
    draw_line(runtime_surf_width-1, runtime_surf_height*(1 - delta_time/(2*normal_delta_time)), runtime_surf_width-1, runtime_surf_height-1);
    surface_reset_target();
    surface_free(runtime_surf);
    runtime_surf = new_runtime_surf;
    draw_set_alpha(0.5);
    draw_surface(runtime_surf, view_wport - runtime_surf_width, 0);
    draw_set_alpha(1);
    */
    
    
    draw_set_colour(c_yellow);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    var yy = 0;
    draw_text(0, (yy++)*16, "Seed: "+seed_string);
    draw_text(0, (yy++)*16, "FPS: "+string(fps));
    draw_text(0, (yy++)*16, "FPS real: "+string(fps_real));
    draw_text(0, (yy++)*16, "Zoom: "+string(view_wview/VIEW_WVIEW));
    draw_text(0, (yy++)*16, "Zoom real: "+string(view_wport/view_wview));
    draw_text(0, (yy++)*16, "Game state: "+game_state_name[game_state]);
    draw_text(0, (yy++)*16, "Shader: "+shader_name);
    
    var mcx = mouse_x div GRID_SIZE;
    var mcy = mouse_y div GRID_SIZE;
    draw_text(0, (yy++)*16, "Mouse cell position: ("+string(mcx)+","+string(mcy)+")");
    var entity_name = "-1";
    if PosInBox(mcx, mcy, 0, 0, map_width, map_height){
        var cell = map[# mcx, mcy];
        //entity
        var entity = cell.entity;
        if (entity != -1){
            entity_name = EntityGetName(entity);
            draw_text(0, (yy++)*16, "Entity: "+entity_name);
            draw_text(0, (yy++)*16, "       hp: "+string(entity.hp)+"/"+string(entity.max_hp));
            draw_text(0, (yy++)*16, "       action: "+string(action_string[entity.action]));
            draw_text(0, (yy++)*16, "       turn_timer: "+string(entity.turn_timer));
            }
        //items
        if (ds_list_size(cell.items) &gt; 0){
            draw_text(0, (yy++)*16, "Items: "+string(ds_list_size(cell.items)));
            }
        }
    
    if creating_GIF{
        draw_text(0, (yy++)*16, "***Creating GIF***");
        }
    
    yy++;
    if (game_state == GAME_STATE.CONSOLE_COMMAND){
        draw_text(0, (yy++)*16, "~ "+console_command);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw items / fire / gas

draw_set_alpha(1);

var imin, jmin, imax, jmax;
imin = max(0, floor(view_xview div GRID_SIZE));
jmin = max(0, floor(view_yview div GRID_SIZE));
imax = min(map_width-1, ((view_xview+view_wview) div GRID_SIZE));
jmax = min(map_height-1, ((view_yview+view_hview) div GRID_SIZE));

//draw items
var isize = ds_list_size(item_list);
for(var n = 0; n &lt; isize; ++n){
    var cell = item_list[| n];
    if ((cell.in_view || cell.discovered || debug_see_all) &amp;&amp; !cell.obstructs_view){
        if PosInBoundry(cell.i, cell.j, imin, jmin, imax, jmax){
            var item = cell.items[| 0];
            DrawItem(item, cell.i, cell.j);
            }
        }
    }

//draw fire
var fsize = ds_list_size(fire_list);
for(var n = 0; n &lt; fsize; ++n){
    var cell = fire_list[| n];
    if (cell.in_view /*|| cell.discovered*/ || debug_see_all){
        if PosInBoundry(cell.i, cell.j, imin, jmin, imax, jmax){
            DrawFire(cell.i, cell.j);
            }
        }
    }
    
//draw gas
var gsize = ds_list_size(gas_list);
for(var n = 0; n &lt; gsize; ++n){
    var cell = gas_list[| n];
    if (cell.in_view /*|| cell.discovered*/ || debug_see_all){
        if PosInBoundry(cell.i, cell.j, imin, jmin, imax, jmax){
            DrawGas(cell.i, cell.j, gas_type_grid[# cell.i, cell.j]);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw view shadow

var surf_width = map_width+2;
var surf_height = map_height+2;
draw_set_colour_write_enable(true, true, true, true);
if !surface_exists(shadow_surf) || (current_time &lt; 5/60*1000){
    surface_free(shadow_surf);
    
    //draw view shadow
    shadow_surf = surface_create(surf_width, surf_height);
    
    surface_set_target(shadow_surf);
    draw_clear_alpha(c_black, 1);
    draw_set_blend_mode(bm_subtract);
    draw_set_alpha(0.5);
    
    for(var i = 1; i &lt; map_width+1; ++i){
        for(var j = 1; j &lt; map_height+1; ++j){
            var cell = map[# i-1, j-1];
            
            var draw_i = i + on_mobile;//android fix
            var draw_j = j + on_mobile;//android fix
            
            if cell.in_view{
                draw_set_alpha(1);
                draw_point_colour(draw_i, draw_j, c_white);
                draw_set_alpha(0.5);
                }
            else if (cell.discovered || debug_see_all){
                draw_point_colour(draw_i, draw_j, c_white);
                }
            else if cell.magic_mapped{
                draw_point_colour(draw_i, draw_j, c_blue);
                }
            }
        }
    
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
    }
draw_set_colour_write_enable(true, true, true, false);

var x_correct = 0;//0.5*(surface_get_width(shadow_surf)/window_get_width() - 1);
var y_correct = 0;//0.5*(surface_get_height(shadow_surf)/window_get_height() - 1);

draw_surface_ext(shadow_surf, -GRID_SIZE + x_correct, -GRID_SIZE + y_correct, GRID_SIZE, GRID_SIZE, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

if DEBUG{
    if show_outlines{
        for(var n = 0; n &lt; ds_list_size(outline_list); n++){
            var outline = outline_list[| n];
            if path_get_closed(outline){
                draw_set_colour(c_red);
                draw_text(path_get_point_x(outline, 0), path_get_point_y(outline, 1), string(n));
                draw_path(outline, 0, 0, true);
                }
            else{
                draw_set_colour(c_yellow);
                var x1, y1, x2, y2;
                x1 = path_get_point_x(outline, 0);
                y1 = path_get_point_y(outline, 0);
                x2 = path_get_point_x(outline, 1);
                y2 = path_get_point_y(outline, 1);
                draw_arrow(x1, y1, x2, y2, 6);
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_destroy_data();
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
